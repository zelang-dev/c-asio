#ifndef REFLECT_H_
#define REFLECT_H_

#include <stddef.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef enum {
    REFLECT_STRUCT = 1,
    REFLECT_STRING = 2,
    REFLECT_INTEGER = 3,
    REFLECT_FLOAT = 4,
    REFLECT_DOUBLE = 5,
    REFLECT_POINTER = 6
} reflect_types;

typedef struct reflect_info_s {
    const char *field_type;
    const char *field_name;
    size_t size;
    size_t offset;
    int is_signed;
    int array_size;
    reflect_types data_type;
} reflect_info_t;

typedef struct reflect_type_s {
    const char *name;
    size_t fields_count;
    size_t size;
    size_t packed_size;
    reflect_info_t *fields;
} reflect_type_t;

#define REFLECT_EXPAND_(X) X
#define REFLECT_EXPAND_VA_(...) __VA_ARGS__
#define REFLECT_FOREACH_1_(FNC, USER_DATA, ARG) FNC(ARG, USER_DATA)
#define REFLECT_FOREACH_2_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) REFLECT_EXPAND_(REFLECT_FOREACH_1_(FNC, USER_DATA, __VA_ARGS__))
#define REFLECT_FOREACH_3_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) REFLECT_EXPAND_(REFLECT_FOREACH_2_(FNC, USER_DATA, __VA_ARGS__))
#define REFLECT_FOREACH_4_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) REFLECT_EXPAND_(REFLECT_FOREACH_3_(FNC, USER_DATA, __VA_ARGS__))
#define REFLECT_FOREACH_5_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) REFLECT_EXPAND_(REFLECT_FOREACH_4_(FNC, USER_DATA, __VA_ARGS__))
#define REFLECT_FOREACH_6_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) REFLECT_EXPAND_(REFLECT_FOREACH_5_(FNC, USER_DATA, __VA_ARGS__))
#define REFLECT_FOREACH_7_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) REFLECT_EXPAND_(REFLECT_FOREACH_6_(FNC, USER_DATA, __VA_ARGS__))
#define REFLECT_FOREACH_8_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) REFLECT_EXPAND_(REFLECT_FOREACH_7_(FNC, USER_DATA, __VA_ARGS__))
#define REFLECT_FOREACH_9_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) REFLECT_EXPAND_(REFLECT_FOREACH_8_(FNC, USER_DATA, __VA_ARGS__))
#define REFLECT_FOREACH_10_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) REFLECT_EXPAND_(REFLECT_FOREACH_9_(FNC, USER_DATA, __VA_ARGS__))
#define REFLECT_FOREACH_11_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) REFLECT_EXPAND_(REFLECT_FOREACH_10_(FNC, USER_DATA, __VA_ARGS__))
#define REFLECT_FOREACH_12_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) REFLECT_EXPAND_(REFLECT_FOREACH_11_(FNC, USER_DATA, __VA_ARGS__))
#define REFLECT_FOREACH_13_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) REFLECT_EXPAND_(REFLECT_FOREACH_12_(FNC, USER_DATA, __VA_ARGS__))
#define REFLECT_FOREACH_14_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) REFLECT_EXPAND_(REFLECT_FOREACH_13_(FNC, USER_DATA, __VA_ARGS__))
#define REFLECT_FOREACH_15_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) REFLECT_EXPAND_(REFLECT_FOREACH_14_(FNC, USER_DATA, __VA_ARGS__))
#define REFLECT_FOREACH_16_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) REFLECT_EXPAND_(REFLECT_FOREACH_15_(FNC, USER_DATA, __VA_ARGS__))
#define REFLECT_FOREACH_17_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) REFLECT_EXPAND_(REFLECT_FOREACH_16_(FNC, USER_DATA, __VA_ARGS__))
#define REFLECT_FOREACH_18_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) REFLECT_EXPAND_(REFLECT_FOREACH_17_(FNC, USER_DATA, __VA_ARGS__))
#define REFLECT_FOREACH_19_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) REFLECT_EXPAND_(REFLECT_FOREACH_18_(FNC, USER_DATA, __VA_ARGS__))
#define REFLECT_FOREACH_20_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) REFLECT_EXPAND_(REFLECT_FOREACH_19_(FNC, USER_DATA, __VA_ARGS__))
#define REFLECT_FOREACH_21_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) REFLECT_EXPAND_(REFLECT_FOREACH_20_(FNC, USER_DATA, __VA_ARGS__))
#define REFLECT_FOREACH_22_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) REFLECT_EXPAND_(REFLECT_FOREACH_21_(FNC, USER_DATA, __VA_ARGS__))
#define REFLECT_FOREACH_23_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) REFLECT_EXPAND_(REFLECT_FOREACH_22_(FNC, USER_DATA, __VA_ARGS__))
#define REFLECT_FOREACH_24_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) REFLECT_EXPAND_(REFLECT_FOREACH_23_(FNC, USER_DATA, __VA_ARGS__))
#define REFLECT_FOREACH_25_(FNC, USER_DATA, ARG, ...) \
    FNC(ARG, USER_DATA) REFLECT_EXPAND_(REFLECT_FOREACH_24_(FNC, USER_DATA, __VA_ARGS__))

#define REFLECT_OVERRIDE_4(_1, _2, _3, _4, FNC, ...) FNC
#define REFLECT_OVERRIDE_4_PLACEHOLDER 1, 2, 3, 4
#define REFLECT_OVERRIDE_5(_1, _2, _3, _4, _5, FNC, ...) FNC
#define REFLECT_OVERRIDE_5_PLACEHOLDER REFLECT_OVERRIDE_4_PLACEHOLDER, 5
#define REFLECT_OVERRIDE_14(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, FNC, ...) FNC
#define REFLECT_OVERRIDE_14_PLACEHOLDER REFLECT_OVERRIDE_5_PLACEHOLDER, 6, 7, 8, 9, 10, 11, 12, 13, 14
#define REFLECT_OVERRIDE_20(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, FNC, ...) FNC
#define REFLECT_OVERRIDE_20_PLACEHOLDER REFLECT_OVERRIDE_14_PLACEHOLDER, 15, 16, 17, 18, 19, 20
#define REFLECT_OVERRIDE_25(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, FNC, ...) FNC
#define REFLECT_OVERRIDE_25_PLACEHOLDER REFLECT_OVERRIDE_20_PLACEHOLDER, 21, 22, 23, 24, 25

#define REFLECT_FOREACH(FNC, USER_DATA, ...) \
    REFLECT_EXPAND_(REFLECT_OVERRIDE_25( __VA_ARGS__,	\
    REFLECT_FOREACH_25_, \
    REFLECT_FOREACH_24_, \
    REFLECT_FOREACH_23_, \
    REFLECT_FOREACH_22_, \
    REFLECT_FOREACH_21_, \
    REFLECT_FOREACH_20_, \
    REFLECT_FOREACH_19_, \
    REFLECT_FOREACH_18_, \
    REFLECT_FOREACH_17_, \
    REFLECT_FOREACH_16_, \
    REFLECT_FOREACH_15_, \
    REFLECT_FOREACH_14_, \
    REFLECT_FOREACH_13_, \
    REFLECT_FOREACH_12_, \
    REFLECT_FOREACH_11_, \
    REFLECT_FOREACH_10_, \
    REFLECT_FOREACH_9_, \
    REFLECT_FOREACH_8_, \
    REFLECT_FOREACH_7_, \
    REFLECT_FOREACH_6_, \
    REFLECT_FOREACH_5_, \
    REFLECT_FOREACH_4_, \
    REFLECT_FOREACH_3_, \
    REFLECT_FOREACH_2_, \
    REFLECT_FOREACH_1_)(FNC, USER_DATA, __VA_ARGS__))

#define REFLECT_DECLARE_SIMPLE_FIELD_(IGNORE, TYPE, FIELD_NAME) \
    TYPE FIELD_NAME;
#define REFLECT_DECLARE_ARRAY_FIELD_(IGNORE, TYPE, FIELD_NAME, ARRAY_SIZE) \
    TYPE FIELD_NAME[ARRAY_SIZE];

#define REFLECT_DECLARE_FIELD_(...) REFLECT_EXPAND_(REFLECT_OVERRIDE_4( \
    __VA_ARGS__, \
    REFLECT_DECLARE_ARRAY_FIELD_, \
    REFLECT_DECLARE_SIMPLE_FIELD_, \
    REFLECT_OVERRIDE_4_PLACEHOLDER)(__VA_ARGS__))

#define REFLECT_DECLARE_FIELD(X, USER_DATA) REFLECT_DECLARE_FIELD_ X

#define REFLECT_SIZEOF_(IGNORE, C_TYPE, ...) +sizeof(C_TYPE)
#define REFLECT_SIZEOF(X, USER_DATA) REFLECT_SIZEOF_ X

#define REFLECT_SUM(...) +1

#define REFLECT_IS_TYPE_SIGNED_(C_TYPE) (C_TYPE)-1 < (C_TYPE)1
#define REFLECT_IS_SIGNED_STRUCT(C_TYPE) 0
#define REFLECT_IS_SIGNED_STRING(C_TYPE) REFLECT_IS_TYPE_SIGNED_(C_TYPE)
#define REFLECT_IS_SIGNED_INTEGER(C_TYPE) REFLECT_IS_TYPE_SIGNED_(C_TYPE)
#define REFLECT_IS_SIGNED_FLOAT(C_TYPE) REFLECT_IS_TYPE_SIGNED_(C_TYPE)
#define REFLECT_IS_SIGNED_DOUBLE(C_TYPE) REFLECT_IS_TYPE_SIGNED_(C_TYPE)
#define REFLECT_IS_SIGNED_POINTER(C_TYPE) 0

#define REFLECT_IS_SIGNED_(DATA_TYPE, CTYPE) REFLECT_IS_SIGNED_##DATA_TYPE(CTYPE)

#define REFLECT_ARRAY_FIELD_INFO_(TYPE_NAME, DATA_TYPE, C_TYPE, FIELD_NAME, ARRAY_SIZE) \
    #C_TYPE, #FIELD_NAME, sizeof(C_TYPE) * ARRAY_SIZE, offsetof(TYPE_NAME, FIELD_NAME), \
    REFLECT_IS_SIGNED_(DATA_TYPE, C_TYPE), ARRAY_SIZE, REFLECT_##DATA_TYPE

#define REFLECT_SIMPLE_FIELD_INFO_(TYPE_NAME, DATA_TYPE, C_TYPE, FIELD_NAME) \
    #C_TYPE, #FIELD_NAME, sizeof(C_TYPE), offsetof(TYPE_NAME, FIELD_NAME), \
    REFLECT_IS_SIGNED_(DATA_TYPE, C_TYPE), -1, REFLECT_##DATA_TYPE

#define REFLECT_FIELD_INFO_(...) \
{ \
    REFLECT_EXPAND_(REFLECT_OVERRIDE_5( \
    __VA_ARGS__, \
    REFLECT_ARRAY_FIELD_INFO_, \
    REFLECT_SIMPLE_FIELD_INFO_, \
    REFLECT_OVERRIDE_5_PLACEHOLDER)(__VA_ARGS__)) \
},

#define REFLECT_FIELD_INFO(X, USER_DATA) \
    REFLECT_FIELD_INFO_(USER_DATA, REFLECT_EXPAND_VA_ X)

#define REFLECT_DEFINE_GET_METHOD(TYPE_NAME, ...) \
    reflect_type_t* reflect_get_##TYPE_NAME##_type_info(void) \
    { \
        static reflect_info_t fields_info[REFLECT_FOREACH(REFLECT_SUM, 0, __VA_ARGS__)] = \
        { \
            REFLECT_FOREACH(REFLECT_FIELD_INFO, TYPE_NAME, __VA_ARGS__) \
        }; \
        static reflect_type_t type_info = \
        { \
            #TYPE_NAME, \
            REFLECT_FOREACH(REFLECT_SUM, 0, __VA_ARGS__), \
            sizeof(TYPE_NAME), \
            REFLECT_FOREACH(REFLECT_SIZEOF, 0, __VA_ARGS__), \
            fields_info \
        }; \
        return &type_info; \
    }

#define REFLECT_DEFINE_STRUCT(TYPE_NAME, ...) \
    typedef struct \
    { \
        REFLECT_FOREACH(REFLECT_DECLARE_FIELD, 0, __VA_ARGS__) \
    } TYPE_NAME; \
    reflect_type_t* reflect_get_##TYPE_NAME##_type_info(void); \
    REFLECT_DEFINE_GET_METHOD(TYPE_NAME, __VA_ARGS__) \

#ifdef __cplusplus
}
#endif

#endif /* REFLECT_H_ */
